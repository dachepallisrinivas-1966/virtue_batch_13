D.Srinivas
dachepallisrinivas@gmail.com
630 573 0633 


--------------------------------------------------------------------------------------------------------------------------------------------
Softwares required:
+	JDK 1.8
+	Eclipse Enterprise Edition IDE
+	Oracle 11g express edition








									Core Java
									----------

What is Java?
+	it is strictly, but partially object oriented programming language.

Who developed Java?
+	James Gosling at Sun microsystems (It was taken over by Oracle Corp.)


Features of Java:
-----------------
+	platform independent
+	robust
+	secured
+	object oriented



+	multi threaded
+	compiled-and-interpreted
+	dynamic
+	simple
+	high performance
+	distributed

1) platform independent?
+	here platform means O/S.



sample.java				sample.class

(source code)		compiler	(byte code)



bytecode can be given to any O/S, so that it can be executed.
is bytecode in 0's and 1's?	
	NO
bytecode is also an intermediate. it is not targeted to any O/S. it is targeted to JVM.
bytecode is understood only by JVM. (Java Virtual Machine)


sample.class			►	JVM	►	O/S
(byte code)					




what is JDK, JRE and JVM?

JDK 	►	Java Development Kit		
JRE	►	Java Runtime Environment
JVM	►	Java Virtual Machine


JDK = JRE + development tools
JRE = JVM + libraries 



development tools:
+	javac
+	java
+	etc.,


JRE will create JVM on-the-fly whenever a program is executed.
once the program is done, the JVM is removed.


is JDK platform independent?
NO

is JRE platform independent?
NO

is JVM platform independent?
NO


only the BYTECODE generated is PLATFORM INDEPENDENT.
the bytecode is given to jvm. jvm will convert the bytecode into native machine code (0's, 1's)


2) secured?
+	no explicit pointers
+	program is executed only inside a jvm.
	(jvm  collection of programs - class loader, bytecode verifier, garbage collector etc.,)


3) robust?
	robust means strong, vigour and healthy

+	strong type checking mechanism
+	exception handling
+	automatic memory management


Coding Standards (Best Practices)
+	indentation
+	naming convensions


Java Tokens?
+	smallest part of the program.
	a) identifiers
	b) operators
	c) keywords
	d) literals
	e) comments


1)	identifiers
	-	name given to variables, classes, methods etc.,

	-	Pascal Notation		:	first letter of every word in upper case and the rest in lower case
						eg: class names, interface names etc.,

						eg: ArrayIndexOutOfBoundsException, ArrayList, TreeMap etc.,


	-	Camel Notation		:	first word is in lowercase, from the second word onwards Pascal Notation
						eg: variable names, method names etc.,

						eg: indexOf(), lastIndexOf() etc.,
			
	-	Uppercase Notation	:	constants
	-	Lowercase Notation	:	package names
						eg: java.io, java.awt, java.util, java.lang etc.,


2)	operators
	-	arithmetic	:	+	-	*	/	%
	-	relational	:	>	<	==	>=	<=	!=
	-	logical		:	&&	||	!
	-	assignment	:	=	+=	-=	*=	/=	%=
	-	bit-wise 	:	&	|	~	>>	<<	^
	-	conditional operator :	(condition) ? true-statement : false-statement
	-	increment/decrement :	++	--
	-	special operators
		;	[]
		"instance of"	operator

3	keywords (reserved words)
	-	if, switch, for, int, float, long

4)	literals
	-	any fixed value that does not change during the program execution.

	numeric literals
	-	integer literals
		-	decimal		-	base 10		-	0 - 9		-	no prefix	
		-	binary		-	base 2		-	0,1		-	0b prefix
		-	octal		-	base 8		-	0-7		-	0  prefix
		-	hexa-decimal	-	base 16		-	0-9,A-F		-	0x prefix


	-	floating-point literals
		-	2.56
	
	non-numeric literals
	-	character literals
		-	single alphabet, single digit, single special symbol enclosed within single quotes
			eg:	'A'	'7'	'?'
	-	string literals
		-	group of characters enclosed within double quotes.
			eg:	"srinivas"	"49-53-20/25"	"9247175823"	"A"	"" (empty string literal)
	-	boolean literals
			true, false

	

5)	comments
	-	//		end-of-line comment	
	-	/* and */	block comment	
	-	/** and */	documentation comment




what is the difference?

	int a = 101;		--	decimal
	int b = 0101;		--	octal
	int c = 0b101		--	binary
	int d = 0x101		--	hexa


what is a constant?
	it is also known as symbollic constant.
	it is a name given to literal.
	whose value can never be changed in the program execution.
	constants can be defined using "final" keyword.


	final double PI = 3.14;
	final int MAX_MARKS = 100;
	final int PASS_MARKS = 35;

	PI, MAX_MARKS, PASS_MARKS are called constant
	3.14, 100, 35 are called literal.



	eg:
		double area = PI * radius * radius;



	double 		:	keyword
	a 		:	identifier
	= 		:	operator
	PI		:	constant
	*		:	operator
	r		:	identifier
	*		:	operator
	r		:	identitifer
	;		:	statement-terminator operator



what are the various data types?

primitive
	byte, short, int, long
	float, double
	char, boolean

non-primitive (user-defined)
	class, interface, enum, annotation


package:
	it is a collection of related classes, interfaces and sub packages.
	internally it is represented as a folder in O/S.


	reverse of the domain name.	

	www.virtue.com	→	com.virtue

	www.dxc.in	→	in.dxc



can main method be overloaded?
	YES.


can we change the signature of the main() ?
	we CAN NOT.


String[] args?
	called as command-line arguments.
	this is another way of taking inputs.


print all the values that are passed as command-line arguments?


arithmetic operations using command line arguments.



Wrapper classes:	(java.lang)
----------------------------------------
	to convert the String form data (data which is in string format)  back into corresponding primtive datatype.

	
class name		static method
---------------------------------------------------------
Integer			parseInt(String-form-int)
Double			parseDouble(String-form-double)
Float
Byte
Character
Boolean



	String str = "100";
	int a = Integer.parseInt(str);		// a = 100


	String str2 = "2.56";
	double b = Double.parseDouble(str2);	// b = 2.56


control structures	(control statements)
--------------------------------------------------
+	if, switch				(decision making)
+	for, while, do..while, enhanced for	(looping)
+	break, continue				(jump)
+	labelled break, labelled continue	



what is the difference between if and switch?
+	if is a bi-directional decision making statement.
	> , <, ==, >=, <= , !=
	int, long, float, double, byte, short, char, boolean

+	switch is a multi-directional decision making statement.
	only ==	(equality) comparisions
	illegal data types	:	float, double, boolean
	legal data types	:	char, byte, short, int, enum, String


for, while, do..while	-	statements are executed as long as the condition is true.

how to choose between for and while?
+	for loop is used to iterate set of statements for a finite number of times.
	where as while loop is used to iterate set of statements for an indefinite number of times. 

what is do..while loop?
+	to execute a loop atleast once irrespective of the condition.


what is the result of a condition?
	boolean value	-	true/false

what is the difference between break and continue?
+	whenever a break statement is encountered within any loop, the control immediately comes out of the loop 
	without executing remaining iterations.

+	whenever a continue statement is encountered within any loop, the control immediately go to the next iteration
	without executing remaining statements in the current iteration.


arrays:
-------
+	linear collection of homogeneous data items stored under single name.
+	in java, every array is an object.
+	it contain a special field (property) "length", that return no. of cells present in the array.
+	once declared, we cannot change the size of the array.	(static data structure)


types of arrays:
----------------
+	single dimension
+	multi  dimension
	-	every row contain same number of columns.
	-	every row is treated as a single dimension array

	1	2	3
	4	5	6
	7	8	9

+	jagged array
	-	every row contain different number of columns.

	1	2
	3	4	5
	6
	7	8	9	10


enhanced for:
-------------
	for(datatype  var : array/collection) {
		statement(s);
	}



what is the difference between for and enhanced for?
+	looping variable of the for loop is always int.
	in the for loop, we can skip few elements, we can traverse in reverse direction also.
	value of looping variable can be changed during the iteration.

+	looping variable in the enhanced for loop must be same as the type of array.
	enhanced for loop can traverse starting from the first element, one after the other, till the last element.
	looping variable cannot be changed in enhanced for loop.


1) accept a number. reverse it. print it.
	eg: input : 749
	ouput : 947

2) accept a number. print the sum of the digits it.
	eg: input : 749
	output : 20	(=9+4+7)

3) accept a number. print whether it is prime number or not.

4) accept a number. print whether it is palindrome or not.
	eg: input : 121
	    output : palindrome

5) accept a number. print whether it is armstrong or not.

	eg: input : 153
	output : 3^3 + 5^3 + 1^3 = 153	

6) fibonacci series


How do you write an infinite loop using for and while?

	for( ; true ; ) {
		System.out.println("Hello sowjanya");
	}

	(or)

	for ( ; ; ) {
		System.out.println("Hello sowjanya");
	}


	while (true) {
		System.out.println("Hello sowjanya");
	}




How do sort an array?

	Arrays.sort(arrayName);


java.util.Arrays  class:
---------------------------
1) equals(sarray-1, sarray-2)
2) sort(sarray)
3) toString(sarray)
4) binarySearch(sarray, key)

5) deepEquals(darray-1, darray-2)
6) deepToString(darray)

	
	










